version: '3.7'
services:
  mysql:
    container_name: mysql
    image: mysql:8
    ports:
      - '13306:3306'
    environment: # -e 옵션
      - MYSQL_DATABASE=moyea_run
      - MYSQL_ROOT_PASSWORD=root
    command: # 명령어 실행
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
    volumes:
      - ./db/mysql:/var/lib/mysql # -v 옵션 (다렉토리 마운트 설정)
  redis:
    image: redis
    container_name: redis
    ports:
      - 16379:6379
    restart: on-failure
  mongo:
    container_name: mongo
    image: mongo
    ports:
      - 27017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
    volumes:
      - ./db/mongo:/data/db
    restart: on-failure
  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - 2181:2181
  kafka:
    image: wurstmeister/kafka:2.12-2.5.0
    container_name: kafka
    ports:
      - 9092:9092
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - zookeeper
  main-server:
    container_name: main-server
    build: ./MoyeoRun_Main
    command: ./entrypoint.dev.sh
    volumes:
      - ./MoyeoRun_Main:/app
    ports:
      - 3000:3000
    depends_on:
      - mysql
      - redis
      - mongo
    environment:
      - PORT=3000
      - NODE_ENV=dev
  noti-server:
    container_name: noti-server
    build: ./MoyeoRun_Noti
    command: ./entrypoint.dev.sh
    volumes:
      - ./MoyeoRun_Noti:/app
    ports:
      - 4000:4000
    depends_on:
      - kafka
    environment:
      - PORT=4000
      - NODE_ENV=dev
  kafkamonitering:
    container_name: kafkamonitering
    image: provectuslabs/kafka-ui:latest
    depends_on:
      - kafka
    ports:
      - 8080:8080
    environment:
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
